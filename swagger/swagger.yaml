openapi: 3.0.3
info:
  title: CSC Self-Service Backend API
  version: 1.0.0
  description: |
    # CSC Self-Service Backend API

    ## Product & Doel
    Deze backend API is een selfservice platform voor HBO-ICT studenten om virtuele machines te beheren. Het primaire doel is om studenten praktijkervaring te laten opdoen met DevOps en infrastructuurbeheer, zonder afhankelijk te zijn van systeembeheerders.

    ## Doelgroep
    - HBO-ICT studenten in de afstudeerrichting Infrastructure
    - HBO-ICT studenten in de afstudeerrichting Software & Infrastructure
    - Studenten die praktijkervaring willen opdoen met cloud en virtualisatie technologieÃ«n

    ## HBO-i Eindkwalificaties
    - **Realiseren**: 
      - Ontwikkelen van API-functionaliteit voor infrastructuurbeheer
      - Implementeren van veilige authenticatie en autorisatie
      - Bouwen van schaalbare en onderhoudbare systemen
    - **Beheren**: 
      - Beheren van virtuele omgevingen via verschillende hypervisors
      - Monitoring en onderhoud van cloud infrastructuur
      - Implementeren van DevOps practices
    - **Adviseren**: 
      - Deze API stelt studenten in staat een infrastructuurontwerp te onderbouwen met werkende oplossingen
      - Evaluatie van verschillende virtualisatieplatformen
      - Beoordeling van infrastructuurvereisten

    ## Functionaliteit Overzicht
    1. **Authenticatie & Gebruikersbeheer**
       - Inloggen en JWT token generatie (/auth/login)
       - Wachtwoord reset functionaliteit (/auth/resetRequest, /auth/resetPassword)
       - Gebruikersprofiel beheer (/api/get-user-info, /api/change-user-info)

    2. **Virtuele Machine Beheer**
       - VM's aanmaken met verschillende configuraties (/api/{hypervisor}/create-server)
       - VM's bekijken per gebruiker (/api/{hypervisor}/listvmsuser)
       - VM's verwijderen (/api/{hypervisor}/delete-server/{vmid})
       - Admin: Alle VM's bekijken (/api/{hypervisor}/listallvms)

    ## Authenticatie
    Alle routes onder `/api/` vereisen authenticatie via een **Bearer-token** in de `Authorization` header. Verkrijg dit token via de `/auth/login` endpoint. Het formaat van de header moet zijn:
    
    ```
    Authorization: Bearer <JWT-token>
    ```
    De JWT-token heb je nodig zodat geen gebruiker zonder inloggegevens toegang heeft tot de API. De JWT is eigenlijk te vergelijken met een user session. Zo weet de API dat je op die route mag komen.

    ## Contact
    <div class="contact-info">
      <p>Voor ondersteuning of vragen:</p>
      <ul>
        <li>Email: <a href="mailto:timon@timonheidenreich.eu">Stuur een Email</a></li>
        <br><br>
        <li>Discord: <a href="https://discord.com/users/760123997475700756" target="_blank">Stuur een Bericht (Ik heb meldingen uitgeschakeld voor Discord)</a></li>
        <br><br>
        <li>Berichten: <a href="sms://timon@timonheidenreich.eu">Stuur een Bericht (alleen voor iOS gebruikers)</a></li>
      </ul>
    </div>
  contact:
    name: CSC Support Team

servers:
  - url: https://api.dev.ikwileenserver.open-ict.hu
    description: dev server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        field:
          type: string
          description: Field that caused the error (if applicable)
        code:
          type: string
          description: Error code for programmatic handling
          enum: [VALIDATION_ERROR, AUTH_ERROR, NOT_FOUND, CONFLICT, SERVER_ERROR]

    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
          description: Gebruikersnaam (studentnummer)
          pattern: '^[0-9]{8}$'
        password:
          type: string
          description: Wachtwoord
          minLength: 8
          maxLength: 128

    ResetRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          description: Email adres van de gebruiker
          format: email

    ResetPasswordRequest:
      type: object
      required: [token, newPassword]
      properties:
        token:
          type: string
          description: Reset token ontvangen via email
        newPassword:
          type: string
          description: Nieuw wachtwoord
          minLength: 8
          maxLength: 128

    UserInfo:
      type: object
      properties:
        email:
          type: string
          description: Email adres van de gebruiker
          format: email
        student_id:
          type: integer
          description: Studentnummer
          minimum: 10000000
          maximum: 99999999
        home_ip:
          type: string
          description: IP adres van de gebruiker
          format: ipv4

    CreateServerRequest:
      type: object
      required: [name, memory, cores, DiskSize, os, subdomain]
      properties:
        name:
          type: string
          description: Naam van de virtuele machine (moet uniek zijn)
          minLength: 3
          maxLength: 63
          pattern: '^[a-zA-Z0-9-]+$'
        memory:
          type: integer
          description: Aantal MB geheugen voor de VM
          minimum: 512
          maximum: 16384
        cores:
          type: integer
          description: Aantal CPU cores voor de VM
          minimum: 1
          maximum: 8
        DiskSize:
          type: integer
          description: Grootte van de schijf in GB
          minimum: 10
          maximum: 500
        description:
          type: string
          description: Optionele beschrijving van de VM
          maxLength: 255
        os:
          type: string
          description: Besturingssysteem voor de VM
          enum: [Ubuntu 22.04, Debian 12, CentOS 9, Windows Server 2022]
        subdomain:
          type: string
          description: Subdomein voor de VM (moet uniek zijn)
          pattern: '^[a-z0-9-]+$'
          minLength: 3
          maxLength: 63

paths:
  /auth/login:
    post:
      summary: Inloggen
      description: |
        Authenticeer een gebruiker en genereer een JWT token.
        
        Validatie:
        - Gebruikersnaam moet een geldig studentnummer zijn (8 cijfers)
        - Wachtwoord moet minimaal 8 karakters lang zijn
      tags:
        - Authenticatie
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Gebruikersnaam (studentnummer)
                  pattern: '^[0-9]{8}$'
                password:
                  type: string
                  description: Wachtwoord
                  minLength: 8
                  maxLength: 128
              required:
                - username
                - password
      responses:
        "200":
          description: Succesvol ingelogd
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token voor authenticatie
                  expires_in:
                    type: integer
                    description: Aantal seconden tot het token verloopt
                  user:
                    type: object
                    properties:
                      student_id:
                        type: string
                        description: Studentnummer
                      email:
                        type: string
                        description: Email adres
        "400":
          description: Ongeldige invoer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Ongeldige gebruikersnaam of wachtwoord formaat"
                field: "username"
                code: "VALIDATION_ERROR"
        "401":
          description: Ongeldige inloggegevens
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Ongeldige gebruikersnaam of wachtwoord"
                code: "AUTH_ERROR"
        "429":
          description: Te veel inlogpogingen
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Te veel inlogpogingen, probeer het later opnieuw"
                code: "RATE_LIMIT_ERROR"
        "500":
          description: Serverfout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Interne serverfout bij authenticatie"
                code: "SERVER_ERROR"

  /auth/resetRequest:
    post:
      summary: Wachtwoordreset aanvragen
      description: Vraag een wachtwoordreset aan
      tags:
        - Authenticatie
      responses:
        "200":
          description: Reset aanvraag succesvol verzonden

  /auth/resetPassword:
    post:
      summary: Wachtwoord resetten
      description: Voer een wachtwoordreset uit
      tags:
        - Authenticatie
      responses:
        "200":
          description: Wachtwoord succesvol gereset

  /api/get-user-info:
    get:
      summary: Gebruikersinformatie ophalen
      description: Haal de informatie op van de ingelogde gebruiker
      security:
        - bearerAuth: []
      tags:
        - Gebruikers
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: JWT token in formaat `Bearer <token>`
      responses:
        "200":
          description: Gebruikersinformatie succesvol opgehaald
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        "401":
          description: Niet geautoriseerd

  /api/change-user-info:
    post:
      summary: Gebruikersinformatie wijzigen
      description: Wijzig de informatie van de ingelogde gebruiker
      security:
        - bearerAuth: []
      tags:
        - Gebruikers
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: JWT token in formaat `Bearer <token>`
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInfo"
      responses:
        "200":
          description: Gebruikersinformatie succesvol gewijzigd
        "400":
          description: Ongeldige invoer
        "401":
          description: Niet geautoriseerd
        "500":
          description: Serverfout bij wijzigen gebruiker

  /api/{hypervisor}/listallvms:
    get:
      summary: Alle virtuele machines ophalen
      description: Haal een lijst op van alle virtuele machines (alleen toegankelijk voor admins)
      security:
        - bearerAuth: []
      tags:
        - Virtuele Machines
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: JWT token in formaat `Bearer <token>`
        - in: path
          name: hypervisor
          required: true
          schema:
            type: string
            enum: [proxmox, vmware, xen]
          description: Type hypervisor
      responses:
        "200":
          description: Lijst van alle virtuele machines succesvol opgehaald
          content:
            application/json:
              schema:
                type: object
                description: Lijst van VM's
        "401":
          description: Niet geautoriseerd
        "403":
          description: Geen admin rechten
        "400":
          description: Ongeldige hypervisor parameter
        "500":
          description: Serverfout bij ophalen VM's

  /api/{hypervisor}/listvmsuser:
    get:
      summary: Gebruiker's virtuele machines ophalen
      description: Haal een lijst op van alle virtuele machines van de ingelogde gebruiker
      security:
        - bearerAuth: []
      tags:
        - Virtuele Machines
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: JWT token in formaat `Bearer <token>`
        - in: path
          name: hypervisor
          required: true
          schema:
            type: string
            enum: [proxmox, vmware, xen]
          description: Type hypervisor
      responses:
        "200":
          description: Lijst van virtuele machines succesvol opgehaald
          content:
            application/json:
              schema:
                type: object
                description: Lijst van VM's van gebruiker
        "401":
          description: Niet geautoriseerd
        "400":
          description: Ongeldige hypervisor parameter
        "500":
          description: Serverfout bij ophalen VM's

  /api/{hypervisor}/create-server:
    post:
      summary: Nieuwe server aanmaken
      description: |
        Maak een nieuwe virtuele machine aan met de opgegeven configuratie.
        
        Validatie:
        - Naam moet uniek zijn en voldoen aan het patroon
        - Geheugen moet tussen 512MB en 16GB liggen
        - CPU cores moeten tussen 1 en 8 liggen
        - Schijfgrootte moet tussen 10GB en 500GB liggen
        - OS moet een van de ondersteunde besturingssystemen zijn
        - Subdomein moet uniek zijn en voldoen aan het patroon
      security:
        - bearerAuth: []
      tags:
        - Virtuele Machines
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: JWT token in formaat Bearer <token>
        - in: path
          name: hypervisor
          required: true
          schema:
            type: string
            enum: [proxmox, vmware, xen]
          description: Type hypervisor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateServerRequest"
      responses:
        "200":
          description: Server succesvol aangemaakt
          content:
            application/json:
              schema:
                type: object
                properties:
                  vmid:
                    type: integer
                    description: ID van de aangemaakte VM
                  status:
                    type: string
                    description: Status van de VM
        "400":
          description: Ongeldige invoer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Ongeldige configuratie voor virtuele machine"
                field: "memory"
                code: "VALIDATION_ERROR"
        "401":
          description: Niet geautoriseerd
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Ongeldige of verlopen authenticatie token"
                code: "AUTH_ERROR"
        "403":
          description: Geen toegang tot deze functionaliteit
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Onvoldoende rechten om een VM aan te maken"
                code: "AUTH_ERROR"
        "409":
          description: Conflict - naam of subdomein bestaat al
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "VM naam of subdomein is al in gebruik"
                field: "name"
                code: "CONFLICT"
        "500":
          description: Serverfout bij aanmaken server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                error: "Interne serverfout bij het aanmaken van de VM"
                code: "SERVER_ERROR"

  /api/{hypervisor}/delete-server/{vmid}:
    post:
      summary: Server verwijderen
      description: Verwijder een virtuele machine
      security:
        - bearerAuth: []
      tags:
        - Virtuele Machines
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: JWT token in formaat `Bearer <token>`
        - in: path
          name: hypervisor
          required: true
          schema:
            type: string
            enum: [proxmox, vmware, xen]
          description: Type hypervisor
        - in: path
          name: vmid
          required: true
          schema:
            type: integer
          description: ID van de virtuele machine om te verwijderen
      responses:
        "200":
          description: Server succesvol verwijderd
        "401":
          description: Niet geautoriseerd
        "403":
          description: Geen toegang tot deze VM
        "400":
          description: Ongeldige VM ID of hypervisor parameter
        "500":
          description: Serverfout bij verwijderen server
